generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  passwordHash String
  role         String
  avatar       String? // ảnh đại diện
  displayName  String? // tên hiển thị
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Customer {
  id      Int    @id @default(autoincrement())
  name    String
  phone   String
  address String
  order   Order?
}

model Product {
  id              Int            @id @default(autoincrement())
  name            String
  favicon         String? // ảnh favicon (1 cái duy nhất)
  topImage        String? // ảnh top (1 cái duy nhất)
  formImage       String? // ảnh form (1 cái duy nhất)
  topbarColor     String
  description     String
  //category     String
  details         String         @default("") //Các thông tin khác của sản phẩm
  price           Int
  salePercent     Int            @default(0)
  salePrice       Int            @default(0)
  urlProduct      String?        @unique //Đường dẫn
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  buyCount        Int            @default(0) // <--- đổi tên ở đây
  images          ProductImage[]
  features        Json? //CÁC DÒNG CHỮ TRÊN Order form
  purchaseOptions Json?          @map("purchase_options")
  seoTitle        String         @default("")
  reviewCount     Int?
  reviews         Review[]
  orders          Order[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  imageUrl  String
  position  String // allowed values:  "slide", "detail"
}

model Order {
  id             Int      @id @default(autoincrement())
  customer       Customer @relation(fields: [customerId], references: [id])
  customerId     Int      @unique
  product        Product  @relation(fields: [productId], references: [id])
  productId      Int
  totalPrice     Float
  receiveStatus  String
  transferStatus String
  purchaseOption String? //{totalPrice: number, option:string }[]
  createdAt      DateTime @default(now())
}

model Review {
  id         Int           @id @default(autoincrement())
  product    Product       @relation(fields: [productId], references: [id])
  productId  Int
  authorName String
  avatarUrl  String?
  imageUrl   String?
  rating     Int?
  comment    String
  day        Int
  replies    ReviewReply[]
}

model ReviewReply {
  id       Int    @id @default(autoincrement())
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId Int
  comment  String
  day      Int
  role     String @default("author") // "admin" hoặc "author"
}
